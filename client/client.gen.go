// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for RBACPolicyPermission.
const (
	Asterisk RBACPolicyPermission = "*"
	DELETE   RBACPolicyPermission = "DELETE"
	GET      RBACPolicyPermission = "GET"
	HEAD     RBACPolicyPermission = "HEAD"
	PATCH    RBACPolicyPermission = "PATCH"
	POST     RBACPolicyPermission = "POST"
)

// CreateUser defines model for CreateUser.
type CreateUser struct {
	// DisplayName The display name for the new user.
	DisplayName string `json:"displayName"`

	// Name The name of the user to create.
	Name string `json:"name"`

	// Password The password for the new user.
	Password string `json:"password"`
}

// ErrField defines model for ErrField.
type ErrField struct {
	// Error A description of the error related to the field.
	Error string `json:"error"`

	// Field The name of the field that caused the error.
	Field string `json:"field"`
}

// ErrGeneric defines model for ErrGeneric.
type ErrGeneric struct {
	Error string `json:"error"`
}

// PatchMe defines model for PatchMe.
type PatchMe struct {
	// NewDisplayName The new display name for the current user.
	NewDisplayName *string `json:"newDisplayName,omitempty"`

	// NewName The new name for the current user.
	NewName *string `json:"newName,omitempty"`

	// NewPassword The new password for the current user.
	NewPassword *string `json:"newPassword,omitempty"`
}

// PatchUser defines model for PatchUser.
type PatchUser struct {
	// Id The uuid of the user to update.
	Id string `json:"id"`

	// NewDisplayName The new display name for the user.
	NewDisplayName *string `json:"newDisplayName,omitempty"`

	// NewName The new name for the user.
	NewName *string `json:"newName,omitempty"`

	// NewPassword The new password for the user.
	NewPassword *string `json:"newPassword,omitempty"`
}

// RBACPolicy defines model for RBACPolicy.
type RBACPolicy struct {
	// Permission The allowed permission (e.g., "GET", "POST", "*").
	Permission RBACPolicyPermission `json:"permission"`

	// ResourceGroup The name of the resource group. (or "*" for all resource groups)
	ResourceGroup string `json:"resourceGroup"`

	// Role The name of the role. (or "*" for all roles)
	Role string `json:"role"`
}

// RBACPolicyPermission The allowed permission (e.g., "GET", "POST", "*").
type RBACPolicyPermission string

// RBACRole defines model for RBACRole.
type RBACRole struct {
	// Role The name of the role.
	Role string `json:"role"`
}

// UserRequest defines model for UserRequest.
type UserRequest struct {
	// Id The uuid of the user to retrieve.
	Id string `json:"id"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// DisplayName The display name of the user.
	DisplayName string `json:"displayName"`

	// Id The uuid of the user.
	Id string `json:"id"`

	// Name The name of the user.
	Name string `json:"name"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	Errors *[]ErrField `json:"errors,omitempty"`
}

// GenericBadRequest defines model for GenericBadRequest.
type GenericBadRequest = ErrGeneric

// GenericNotFound defines model for GenericNotFound.
type GenericNotFound = ErrGeneric

// DeleteRbacEndpointJSONBody defines parameters for DeleteRbacEndpoint.
type DeleteRbacEndpointJSONBody struct {
	// Endpoint The endpoint to remove from its resource group.
	Endpoint string `json:"endpoint"`

	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// GetRbacEndpointParams defines parameters for GetRbacEndpoint.
type GetRbacEndpointParams struct {
	// Endpoint The endpoint to query.
	Endpoint string `form:"endpoint" json:"endpoint"`
}

// PostRbacEndpointJSONBody defines parameters for PostRbacEndpoint.
type PostRbacEndpointJSONBody struct {
	// Endpoint The endpoint to assign to the resource group.
	Endpoint string `json:"endpoint"`

	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// DeleteRbacResourceGroupJSONBody defines parameters for DeleteRbacResourceGroup.
type DeleteRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// GetRbacResourceGroupParams defines parameters for GetRbacResourceGroup.
type GetRbacResourceGroupParams struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `form:"resourceGroup" json:"resourceGroup"`
}

// HeadRbacResourceGroupJSONBody defines parameters for HeadRbacResourceGroup.
type HeadRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// PostRbacResourceGroupJSONBody defines parameters for PostRbacResourceGroup.
type PostRbacResourceGroupJSONBody struct {
	// ResourceGroup The name of the resource group.
	ResourceGroup string `json:"resourceGroup"`
}

// GetRbacRoleParams defines parameters for GetRbacRole.
type GetRbacRoleParams struct {
	// Role The name of the role.
	Role string `form:"role" json:"role"`
}

// DeleteRbacUserJSONBody defines parameters for DeleteRbacUser.
type DeleteRbacUserJSONBody struct {
	// Role The name of the role to remove from the user.
	Role string `json:"role"`

	// UserId The uuid of the user.
	UserId string `json:"userId"`
}

// GetRbacUserParams defines parameters for GetRbacUser.
type GetRbacUserParams struct {
	// UserId The uuid of the user.
	UserId string `form:"userId" json:"userId"`
}

// PostRbacUserJSONBody defines parameters for PostRbacUser.
type PostRbacUserJSONBody struct {
	// Role The name of the role to assign to the user.
	Role string `json:"role"`

	// UserId The uuid of the user.
	UserId string `json:"userId"`
}

// GetUsersUserParams defines parameters for GetUsersUser.
type GetUsersUserParams struct {
	// UserId The uuid of the user to retrieve.
	UserId string `form:"userId" json:"userId"`
}

// DeleteRbacEndpointJSONRequestBody defines body for DeleteRbacEndpoint for application/json ContentType.
type DeleteRbacEndpointJSONRequestBody DeleteRbacEndpointJSONBody

// PostRbacEndpointJSONRequestBody defines body for PostRbacEndpoint for application/json ContentType.
type PostRbacEndpointJSONRequestBody PostRbacEndpointJSONBody

// DeleteRbacPolicyJSONRequestBody defines body for DeleteRbacPolicy for application/json ContentType.
type DeleteRbacPolicyJSONRequestBody = RBACPolicy

// PostRbacPolicyJSONRequestBody defines body for PostRbacPolicy for application/json ContentType.
type PostRbacPolicyJSONRequestBody = RBACPolicy

// DeleteRbacResourceGroupJSONRequestBody defines body for DeleteRbacResourceGroup for application/json ContentType.
type DeleteRbacResourceGroupJSONRequestBody DeleteRbacResourceGroupJSONBody

// HeadRbacResourceGroupJSONRequestBody defines body for HeadRbacResourceGroup for application/json ContentType.
type HeadRbacResourceGroupJSONRequestBody HeadRbacResourceGroupJSONBody

// PostRbacResourceGroupJSONRequestBody defines body for PostRbacResourceGroup for application/json ContentType.
type PostRbacResourceGroupJSONRequestBody PostRbacResourceGroupJSONBody

// DeleteRbacRoleJSONRequestBody defines body for DeleteRbacRole for application/json ContentType.
type DeleteRbacRoleJSONRequestBody = RBACRole

// HeadRbacRoleJSONRequestBody defines body for HeadRbacRole for application/json ContentType.
type HeadRbacRoleJSONRequestBody = RBACRole

// PostRbacRoleJSONRequestBody defines body for PostRbacRole for application/json ContentType.
type PostRbacRoleJSONRequestBody = RBACRole

// DeleteRbacUserJSONRequestBody defines body for DeleteRbacUser for application/json ContentType.
type DeleteRbacUserJSONRequestBody DeleteRbacUserJSONBody

// PostRbacUserJSONRequestBody defines body for PostRbacUser for application/json ContentType.
type PostRbacUserJSONRequestBody PostRbacUserJSONBody

// PatchUsersMeJSONRequestBody defines body for PatchUsersMe for application/json ContentType.
type PatchUsersMeJSONRequestBody = PatchMe

// DeleteUsersUserJSONRequestBody defines body for DeleteUsersUser for application/json ContentType.
type DeleteUsersUserJSONRequestBody = UserRequest

// HeadUsersUserJSONRequestBody defines body for HeadUsersUser for application/json ContentType.
type HeadUsersUserJSONRequestBody = UserRequest

// PatchUsersUserJSONRequestBody defines body for PatchUsersUser for application/json ContentType.
type PatchUsersUserJSONRequestBody = PatchUser

// PostUsersUserJSONRequestBody defines body for PostUsersUser for application/json ContentType.
type PostUsersUserJSONRequestBody = CreateUser

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteRbacEndpointWithBody request with any body
	DeleteRbacEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRbacEndpoint(ctx context.Context, body DeleteRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacEndpoint request
	GetRbacEndpoint(ctx context.Context, params *GetRbacEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRbacEndpointWithBody request with any body
	PostRbacEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRbacEndpoint(ctx context.Context, body PostRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacListResourceGroups request
	GetRbacListResourceGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacListRoles request
	GetRbacListRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRbacPolicyWithBody request with any body
	DeleteRbacPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRbacPolicy(ctx context.Context, body DeleteRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacPolicy request
	GetRbacPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRbacPolicyWithBody request with any body
	PostRbacPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRbacPolicy(ctx context.Context, body PostRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRbacResourceGroupWithBody request with any body
	DeleteRbacResourceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRbacResourceGroup(ctx context.Context, body DeleteRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacResourceGroup request
	GetRbacResourceGroup(ctx context.Context, params *GetRbacResourceGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadRbacResourceGroupWithBody request with any body
	HeadRbacResourceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HeadRbacResourceGroup(ctx context.Context, body HeadRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRbacResourceGroupWithBody request with any body
	PostRbacResourceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRbacResourceGroup(ctx context.Context, body PostRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRbacRoleWithBody request with any body
	DeleteRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRbacRole(ctx context.Context, body DeleteRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacRole request
	GetRbacRole(ctx context.Context, params *GetRbacRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadRbacRoleWithBody request with any body
	HeadRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HeadRbacRole(ctx context.Context, body HeadRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRbacRoleWithBody request with any body
	PostRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRbacRole(ctx context.Context, body PostRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRbacUserWithBody request with any body
	DeleteRbacUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteRbacUser(ctx context.Context, body DeleteRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRbacUser request
	GetRbacUser(ctx context.Context, params *GetRbacUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRbacUserWithBody request with any body
	PostRbacUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRbacUser(ctx context.Context, body PostRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersList request
	GetUsersList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMe request
	GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersMeWithBody request with any body
	PatchUsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersMe(ctx context.Context, body PatchUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUserWithBody request with any body
	DeleteUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteUsersUser(ctx context.Context, body DeleteUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUser request
	GetUsersUser(ctx context.Context, params *GetUsersUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// HeadUsersUserWithBody request with any body
	HeadUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	HeadUsersUser(ctx context.Context, body HeadUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersUserWithBody request with any body
	PatchUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersUser(ctx context.Context, body PatchUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersUserWithBody request with any body
	PostUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsersUser(ctx context.Context, body PostUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteRbacEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacEndpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacEndpoint(ctx context.Context, body DeleteRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacEndpointRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacEndpoint(ctx context.Context, params *GetRbacEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacEndpointRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacEndpointWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacEndpointRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacEndpoint(ctx context.Context, body PostRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacEndpointRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacListResourceGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacListResourceGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacListRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacListRolesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacPolicy(ctx context.Context, body DeleteRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacPolicy(ctx context.Context, body PostRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacResourceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacResourceGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacResourceGroup(ctx context.Context, body DeleteRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacResourceGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacResourceGroup(ctx context.Context, params *GetRbacResourceGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacResourceGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadRbacResourceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadRbacResourceGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadRbacResourceGroup(ctx context.Context, body HeadRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadRbacResourceGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacResourceGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacResourceGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacResourceGroup(ctx context.Context, body PostRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacResourceGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacRole(ctx context.Context, body DeleteRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacRole(ctx context.Context, params *GetRbacRoleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacRoleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadRbacRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadRbacRole(ctx context.Context, body HeadRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadRbacRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacRoleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacRoleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacRole(ctx context.Context, body PostRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacRoleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRbacUser(ctx context.Context, body DeleteRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRbacUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRbacUser(ctx context.Context, params *GetRbacUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRbacUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRbacUser(ctx context.Context, body PostRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRbacUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersMe(ctx context.Context, body PatchUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUser(ctx context.Context, body DeleteUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUser(ctx context.Context, params *GetUsersUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadUsersUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) HeadUsersUser(ctx context.Context, body HeadUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewHeadUsersUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersUser(ctx context.Context, body PatchUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUser(ctx context.Context, body PostUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteRbacEndpointRequest calls the generic DeleteRbacEndpoint builder with application/json body
func NewDeleteRbacEndpointRequest(server string, body DeleteRbacEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRbacEndpointRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRbacEndpointRequestWithBody generates requests for DeleteRbacEndpoint with any type of body
func NewDeleteRbacEndpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/endpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRbacEndpointRequest generates requests for GetRbacEndpoint
func NewGetRbacEndpointRequest(server string, params *GetRbacEndpointParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/endpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "endpoint", runtime.ParamLocationQuery, params.Endpoint); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRbacEndpointRequest calls the generic PostRbacEndpoint builder with application/json body
func NewPostRbacEndpointRequest(server string, body PostRbacEndpointJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRbacEndpointRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRbacEndpointRequestWithBody generates requests for PostRbacEndpoint with any type of body
func NewPostRbacEndpointRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/endpoint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRbacListResourceGroupsRequest generates requests for GetRbacListResourceGroups
func NewGetRbacListResourceGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/list-resource-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRbacListRolesRequest generates requests for GetRbacListRoles
func NewGetRbacListRolesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/list-roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRbacPolicyRequest calls the generic DeleteRbacPolicy builder with application/json body
func NewDeleteRbacPolicyRequest(server string, body DeleteRbacPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRbacPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRbacPolicyRequestWithBody generates requests for DeleteRbacPolicy with any type of body
func NewDeleteRbacPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRbacPolicyRequest generates requests for GetRbacPolicy
func NewGetRbacPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRbacPolicyRequest calls the generic PostRbacPolicy builder with application/json body
func NewPostRbacPolicyRequest(server string, body PostRbacPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRbacPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRbacPolicyRequestWithBody generates requests for PostRbacPolicy with any type of body
func NewPostRbacPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRbacResourceGroupRequest calls the generic DeleteRbacResourceGroup builder with application/json body
func NewDeleteRbacResourceGroupRequest(server string, body DeleteRbacResourceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRbacResourceGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRbacResourceGroupRequestWithBody generates requests for DeleteRbacResourceGroup with any type of body
func NewDeleteRbacResourceGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/resource-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRbacResourceGroupRequest generates requests for GetRbacResourceGroup
func NewGetRbacResourceGroupRequest(server string, params *GetRbacResourceGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/resource-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceGroup", runtime.ParamLocationQuery, params.ResourceGroup); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadRbacResourceGroupRequest calls the generic HeadRbacResourceGroup builder with application/json body
func NewHeadRbacResourceGroupRequest(server string, body HeadRbacResourceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHeadRbacResourceGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewHeadRbacResourceGroupRequestWithBody generates requests for HeadRbacResourceGroup with any type of body
func NewHeadRbacResourceGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/resource-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRbacResourceGroupRequest calls the generic PostRbacResourceGroup builder with application/json body
func NewPostRbacResourceGroupRequest(server string, body PostRbacResourceGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRbacResourceGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRbacResourceGroupRequestWithBody generates requests for PostRbacResourceGroup with any type of body
func NewPostRbacResourceGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/resource-group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRbacRoleRequest calls the generic DeleteRbacRole builder with application/json body
func NewDeleteRbacRoleRequest(server string, body DeleteRbacRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRbacRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRbacRoleRequestWithBody generates requests for DeleteRbacRole with any type of body
func NewDeleteRbacRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRbacRoleRequest generates requests for GetRbacRole
func NewGetRbacRoleRequest(server string, params *GetRbacRoleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadRbacRoleRequest calls the generic HeadRbacRole builder with application/json body
func NewHeadRbacRoleRequest(server string, body HeadRbacRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHeadRbacRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewHeadRbacRoleRequestWithBody generates requests for HeadRbacRole with any type of body
func NewHeadRbacRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostRbacRoleRequest calls the generic PostRbacRole builder with application/json body
func NewPostRbacRoleRequest(server string, body PostRbacRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRbacRoleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRbacRoleRequestWithBody generates requests for PostRbacRole with any type of body
func NewPostRbacRoleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/role")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRbacUserRequest calls the generic DeleteRbacUser builder with application/json body
func NewDeleteRbacUserRequest(server string, body DeleteRbacUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteRbacUserRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteRbacUserRequestWithBody generates requests for DeleteRbacUser with any type of body
func NewDeleteRbacUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRbacUserRequest generates requests for GetRbacUser
func NewGetRbacUserRequest(server string, params *GetRbacUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRbacUserRequest calls the generic PostRbacUser builder with application/json body
func NewPostRbacUserRequest(server string, body PostRbacUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRbacUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRbacUserRequestWithBody generates requests for PostRbacUser with any type of body
func NewPostRbacUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rbac/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersListRequest generates requests for GetUsersList
func NewGetUsersListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeRequest generates requests for GetUsersMe
func NewGetUsersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUsersMeRequest calls the generic PatchUsersMe builder with application/json body
func NewPatchUsersMeRequest(server string, body PatchUsersMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersMeRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchUsersMeRequestWithBody generates requests for PatchUsersMe with any type of body
func NewPatchUsersMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersUserRequest calls the generic DeleteUsersUser builder with application/json body
func NewDeleteUsersUserRequest(server string, body DeleteUsersUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteUsersUserRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteUsersUserRequestWithBody generates requests for DeleteUsersUser with any type of body
func NewDeleteUsersUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersUserRequest generates requests for GetUsersUser
func NewGetUsersUserRequest(server string, params *GetUsersUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewHeadUsersUserRequest calls the generic HeadUsersUser builder with application/json body
func NewHeadUsersUserRequest(server string, body HeadUsersUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewHeadUsersUserRequestWithBody(server, "application/json", bodyReader)
}

// NewHeadUsersUserRequestWithBody generates requests for HeadUsersUser with any type of body
func NewHeadUsersUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("HEAD", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchUsersUserRequest calls the generic PatchUsersUser builder with application/json body
func NewPatchUsersUserRequest(server string, body PatchUsersUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchUsersUserRequestWithBody generates requests for PatchUsersUser with any type of body
func NewPatchUsersUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUsersUserRequest calls the generic PostUsersUser builder with application/json body
func NewPostUsersUserRequest(server string, body PostUsersUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersUserRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersUserRequestWithBody generates requests for PostUsersUser with any type of body
func NewPostUsersUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteRbacEndpointWithBodyWithResponse request with any body
	DeleteRbacEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacEndpointResponse, error)

	DeleteRbacEndpointWithResponse(ctx context.Context, body DeleteRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacEndpointResponse, error)

	// GetRbacEndpointWithResponse request
	GetRbacEndpointWithResponse(ctx context.Context, params *GetRbacEndpointParams, reqEditors ...RequestEditorFn) (*GetRbacEndpointResponse, error)

	// PostRbacEndpointWithBodyWithResponse request with any body
	PostRbacEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacEndpointResponse, error)

	PostRbacEndpointWithResponse(ctx context.Context, body PostRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacEndpointResponse, error)

	// GetRbacListResourceGroupsWithResponse request
	GetRbacListResourceGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRbacListResourceGroupsResponse, error)

	// GetRbacListRolesWithResponse request
	GetRbacListRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRbacListRolesResponse, error)

	// DeleteRbacPolicyWithBodyWithResponse request with any body
	DeleteRbacPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacPolicyResponse, error)

	DeleteRbacPolicyWithResponse(ctx context.Context, body DeleteRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacPolicyResponse, error)

	// GetRbacPolicyWithResponse request
	GetRbacPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRbacPolicyResponse, error)

	// PostRbacPolicyWithBodyWithResponse request with any body
	PostRbacPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacPolicyResponse, error)

	PostRbacPolicyWithResponse(ctx context.Context, body PostRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacPolicyResponse, error)

	// DeleteRbacResourceGroupWithBodyWithResponse request with any body
	DeleteRbacResourceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacResourceGroupResponse, error)

	DeleteRbacResourceGroupWithResponse(ctx context.Context, body DeleteRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacResourceGroupResponse, error)

	// GetRbacResourceGroupWithResponse request
	GetRbacResourceGroupWithResponse(ctx context.Context, params *GetRbacResourceGroupParams, reqEditors ...RequestEditorFn) (*GetRbacResourceGroupResponse, error)

	// HeadRbacResourceGroupWithBodyWithResponse request with any body
	HeadRbacResourceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeadRbacResourceGroupResponse, error)

	HeadRbacResourceGroupWithResponse(ctx context.Context, body HeadRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*HeadRbacResourceGroupResponse, error)

	// PostRbacResourceGroupWithBodyWithResponse request with any body
	PostRbacResourceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacResourceGroupResponse, error)

	PostRbacResourceGroupWithResponse(ctx context.Context, body PostRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacResourceGroupResponse, error)

	// DeleteRbacRoleWithBodyWithResponse request with any body
	DeleteRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacRoleResponse, error)

	DeleteRbacRoleWithResponse(ctx context.Context, body DeleteRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacRoleResponse, error)

	// GetRbacRoleWithResponse request
	GetRbacRoleWithResponse(ctx context.Context, params *GetRbacRoleParams, reqEditors ...RequestEditorFn) (*GetRbacRoleResponse, error)

	// HeadRbacRoleWithBodyWithResponse request with any body
	HeadRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeadRbacRoleResponse, error)

	HeadRbacRoleWithResponse(ctx context.Context, body HeadRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*HeadRbacRoleResponse, error)

	// PostRbacRoleWithBodyWithResponse request with any body
	PostRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacRoleResponse, error)

	PostRbacRoleWithResponse(ctx context.Context, body PostRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacRoleResponse, error)

	// DeleteRbacUserWithBodyWithResponse request with any body
	DeleteRbacUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacUserResponse, error)

	DeleteRbacUserWithResponse(ctx context.Context, body DeleteRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacUserResponse, error)

	// GetRbacUserWithResponse request
	GetRbacUserWithResponse(ctx context.Context, params *GetRbacUserParams, reqEditors ...RequestEditorFn) (*GetRbacUserResponse, error)

	// PostRbacUserWithBodyWithResponse request with any body
	PostRbacUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacUserResponse, error)

	PostRbacUserWithResponse(ctx context.Context, body PostRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacUserResponse, error)

	// GetUsersListWithResponse request
	GetUsersListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersListResponse, error)

	// GetUsersMeWithResponse request
	GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error)

	// PatchUsersMeWithBodyWithResponse request with any body
	PatchUsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersMeResponse, error)

	PatchUsersMeWithResponse(ctx context.Context, body PatchUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersMeResponse, error)

	// DeleteUsersUserWithBodyWithResponse request with any body
	DeleteUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUsersUserResponse, error)

	DeleteUsersUserWithResponse(ctx context.Context, body DeleteUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUsersUserResponse, error)

	// GetUsersUserWithResponse request
	GetUsersUserWithResponse(ctx context.Context, params *GetUsersUserParams, reqEditors ...RequestEditorFn) (*GetUsersUserResponse, error)

	// HeadUsersUserWithBodyWithResponse request with any body
	HeadUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeadUsersUserResponse, error)

	HeadUsersUserWithResponse(ctx context.Context, body HeadUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*HeadUsersUserResponse, error)

	// PatchUsersUserWithBodyWithResponse request with any body
	PatchUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersUserResponse, error)

	PatchUsersUserWithResponse(ctx context.Context, body PatchUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersUserResponse, error)

	// PostUsersUserWithBodyWithResponse request with any body
	PostUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUserResponse, error)

	PostUsersUserWithResponse(ctx context.Context, body PostUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUserResponse, error)
}

type DeleteRbacEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteRbacEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRbacEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *GenericBadRequest
}

// Status returns HTTPResponse.Status
func (r GetRbacEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRbacEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r PostRbacEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRbacEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacListResourceGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetRbacListResourceGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacListResourceGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacListRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetRbacListRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacListRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRbacPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
}

// Status returns HTTPResponse.Status
func (r DeleteRbacPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRbacPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RBACPolicy
}

// Status returns HTTPResponse.Status
func (r GetRbacPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRbacPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *FieldError
}

// Status returns HTTPResponse.Status
func (r PostRbacPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRbacPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRbacResourceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteRbacResourceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRbacResourceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacResourceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r GetRbacResourceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacResourceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadRbacResourceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadRbacResourceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadRbacResourceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRbacResourceGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON409      *ErrGeneric
}

// Status returns HTTPResponse.Status
func (r PostRbacResourceGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRbacResourceGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
	JSON409      *ErrGeneric
}

// Status returns HTTPResponse.Status
func (r DeleteRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r GetRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRbacRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON409      *ErrGeneric
}

// Status returns HTTPResponse.Status
func (r PostRbacRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRbacRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRbacUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteRbacUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRbacUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRbacUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r GetRbacUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRbacUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRbacUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r PostRbacUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRbacUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]UserResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
}

// Status returns HTTPResponse.Status
func (r GetUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON400      *GenericBadRequest
	JSON409      *ErrGeneric
}

// Status returns HTTPResponse.Status
func (r PatchUsersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
}

// Status returns HTTPResponse.Status
func (r GetUsersUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type HeadUsersUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r HeadUsersUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r HeadUsersUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
	JSON400      *GenericBadRequest
	JSON404      *GenericNotFound
	JSON409      *ErrGeneric
}

// Status returns HTTPResponse.Status
func (r PatchUsersUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UserResponse
	JSON400      *GenericBadRequest
	JSON409      *ErrGeneric
}

// Status returns HTTPResponse.Status
func (r PostUsersUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteRbacEndpointWithBodyWithResponse request with arbitrary body returning *DeleteRbacEndpointResponse
func (c *ClientWithResponses) DeleteRbacEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacEndpointResponse, error) {
	rsp, err := c.DeleteRbacEndpointWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacEndpointResponse(rsp)
}

func (c *ClientWithResponses) DeleteRbacEndpointWithResponse(ctx context.Context, body DeleteRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacEndpointResponse, error) {
	rsp, err := c.DeleteRbacEndpoint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacEndpointResponse(rsp)
}

// GetRbacEndpointWithResponse request returning *GetRbacEndpointResponse
func (c *ClientWithResponses) GetRbacEndpointWithResponse(ctx context.Context, params *GetRbacEndpointParams, reqEditors ...RequestEditorFn) (*GetRbacEndpointResponse, error) {
	rsp, err := c.GetRbacEndpoint(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacEndpointResponse(rsp)
}

// PostRbacEndpointWithBodyWithResponse request with arbitrary body returning *PostRbacEndpointResponse
func (c *ClientWithResponses) PostRbacEndpointWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacEndpointResponse, error) {
	rsp, err := c.PostRbacEndpointWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacEndpointResponse(rsp)
}

func (c *ClientWithResponses) PostRbacEndpointWithResponse(ctx context.Context, body PostRbacEndpointJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacEndpointResponse, error) {
	rsp, err := c.PostRbacEndpoint(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacEndpointResponse(rsp)
}

// GetRbacListResourceGroupsWithResponse request returning *GetRbacListResourceGroupsResponse
func (c *ClientWithResponses) GetRbacListResourceGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRbacListResourceGroupsResponse, error) {
	rsp, err := c.GetRbacListResourceGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacListResourceGroupsResponse(rsp)
}

// GetRbacListRolesWithResponse request returning *GetRbacListRolesResponse
func (c *ClientWithResponses) GetRbacListRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRbacListRolesResponse, error) {
	rsp, err := c.GetRbacListRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacListRolesResponse(rsp)
}

// DeleteRbacPolicyWithBodyWithResponse request with arbitrary body returning *DeleteRbacPolicyResponse
func (c *ClientWithResponses) DeleteRbacPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacPolicyResponse, error) {
	rsp, err := c.DeleteRbacPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacPolicyResponse(rsp)
}

func (c *ClientWithResponses) DeleteRbacPolicyWithResponse(ctx context.Context, body DeleteRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacPolicyResponse, error) {
	rsp, err := c.DeleteRbacPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacPolicyResponse(rsp)
}

// GetRbacPolicyWithResponse request returning *GetRbacPolicyResponse
func (c *ClientWithResponses) GetRbacPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRbacPolicyResponse, error) {
	rsp, err := c.GetRbacPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacPolicyResponse(rsp)
}

// PostRbacPolicyWithBodyWithResponse request with arbitrary body returning *PostRbacPolicyResponse
func (c *ClientWithResponses) PostRbacPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacPolicyResponse, error) {
	rsp, err := c.PostRbacPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacPolicyResponse(rsp)
}

func (c *ClientWithResponses) PostRbacPolicyWithResponse(ctx context.Context, body PostRbacPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacPolicyResponse, error) {
	rsp, err := c.PostRbacPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacPolicyResponse(rsp)
}

// DeleteRbacResourceGroupWithBodyWithResponse request with arbitrary body returning *DeleteRbacResourceGroupResponse
func (c *ClientWithResponses) DeleteRbacResourceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacResourceGroupResponse, error) {
	rsp, err := c.DeleteRbacResourceGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacResourceGroupResponse(rsp)
}

func (c *ClientWithResponses) DeleteRbacResourceGroupWithResponse(ctx context.Context, body DeleteRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacResourceGroupResponse, error) {
	rsp, err := c.DeleteRbacResourceGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacResourceGroupResponse(rsp)
}

// GetRbacResourceGroupWithResponse request returning *GetRbacResourceGroupResponse
func (c *ClientWithResponses) GetRbacResourceGroupWithResponse(ctx context.Context, params *GetRbacResourceGroupParams, reqEditors ...RequestEditorFn) (*GetRbacResourceGroupResponse, error) {
	rsp, err := c.GetRbacResourceGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacResourceGroupResponse(rsp)
}

// HeadRbacResourceGroupWithBodyWithResponse request with arbitrary body returning *HeadRbacResourceGroupResponse
func (c *ClientWithResponses) HeadRbacResourceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeadRbacResourceGroupResponse, error) {
	rsp, err := c.HeadRbacResourceGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadRbacResourceGroupResponse(rsp)
}

func (c *ClientWithResponses) HeadRbacResourceGroupWithResponse(ctx context.Context, body HeadRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*HeadRbacResourceGroupResponse, error) {
	rsp, err := c.HeadRbacResourceGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadRbacResourceGroupResponse(rsp)
}

// PostRbacResourceGroupWithBodyWithResponse request with arbitrary body returning *PostRbacResourceGroupResponse
func (c *ClientWithResponses) PostRbacResourceGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacResourceGroupResponse, error) {
	rsp, err := c.PostRbacResourceGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacResourceGroupResponse(rsp)
}

func (c *ClientWithResponses) PostRbacResourceGroupWithResponse(ctx context.Context, body PostRbacResourceGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacResourceGroupResponse, error) {
	rsp, err := c.PostRbacResourceGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacResourceGroupResponse(rsp)
}

// DeleteRbacRoleWithBodyWithResponse request with arbitrary body returning *DeleteRbacRoleResponse
func (c *ClientWithResponses) DeleteRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacRoleResponse, error) {
	rsp, err := c.DeleteRbacRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacRoleResponse(rsp)
}

func (c *ClientWithResponses) DeleteRbacRoleWithResponse(ctx context.Context, body DeleteRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacRoleResponse, error) {
	rsp, err := c.DeleteRbacRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacRoleResponse(rsp)
}

// GetRbacRoleWithResponse request returning *GetRbacRoleResponse
func (c *ClientWithResponses) GetRbacRoleWithResponse(ctx context.Context, params *GetRbacRoleParams, reqEditors ...RequestEditorFn) (*GetRbacRoleResponse, error) {
	rsp, err := c.GetRbacRole(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacRoleResponse(rsp)
}

// HeadRbacRoleWithBodyWithResponse request with arbitrary body returning *HeadRbacRoleResponse
func (c *ClientWithResponses) HeadRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeadRbacRoleResponse, error) {
	rsp, err := c.HeadRbacRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadRbacRoleResponse(rsp)
}

func (c *ClientWithResponses) HeadRbacRoleWithResponse(ctx context.Context, body HeadRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*HeadRbacRoleResponse, error) {
	rsp, err := c.HeadRbacRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadRbacRoleResponse(rsp)
}

// PostRbacRoleWithBodyWithResponse request with arbitrary body returning *PostRbacRoleResponse
func (c *ClientWithResponses) PostRbacRoleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacRoleResponse, error) {
	rsp, err := c.PostRbacRoleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacRoleResponse(rsp)
}

func (c *ClientWithResponses) PostRbacRoleWithResponse(ctx context.Context, body PostRbacRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacRoleResponse, error) {
	rsp, err := c.PostRbacRole(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacRoleResponse(rsp)
}

// DeleteRbacUserWithBodyWithResponse request with arbitrary body returning *DeleteRbacUserResponse
func (c *ClientWithResponses) DeleteRbacUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteRbacUserResponse, error) {
	rsp, err := c.DeleteRbacUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteRbacUserWithResponse(ctx context.Context, body DeleteRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteRbacUserResponse, error) {
	rsp, err := c.DeleteRbacUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRbacUserResponse(rsp)
}

// GetRbacUserWithResponse request returning *GetRbacUserResponse
func (c *ClientWithResponses) GetRbacUserWithResponse(ctx context.Context, params *GetRbacUserParams, reqEditors ...RequestEditorFn) (*GetRbacUserResponse, error) {
	rsp, err := c.GetRbacUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRbacUserResponse(rsp)
}

// PostRbacUserWithBodyWithResponse request with arbitrary body returning *PostRbacUserResponse
func (c *ClientWithResponses) PostRbacUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRbacUserResponse, error) {
	rsp, err := c.PostRbacUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacUserResponse(rsp)
}

func (c *ClientWithResponses) PostRbacUserWithResponse(ctx context.Context, body PostRbacUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRbacUserResponse, error) {
	rsp, err := c.PostRbacUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRbacUserResponse(rsp)
}

// GetUsersListWithResponse request returning *GetUsersListResponse
func (c *ClientWithResponses) GetUsersListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersListResponse, error) {
	rsp, err := c.GetUsersList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersListResponse(rsp)
}

// GetUsersMeWithResponse request returning *GetUsersMeResponse
func (c *ClientWithResponses) GetUsersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeResponse, error) {
	rsp, err := c.GetUsersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeResponse(rsp)
}

// PatchUsersMeWithBodyWithResponse request with arbitrary body returning *PatchUsersMeResponse
func (c *ClientWithResponses) PatchUsersMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersMeResponse, error) {
	rsp, err := c.PatchUsersMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersMeResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersMeWithResponse(ctx context.Context, body PatchUsersMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersMeResponse, error) {
	rsp, err := c.PatchUsersMe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersMeResponse(rsp)
}

// DeleteUsersUserWithBodyWithResponse request with arbitrary body returning *DeleteUsersUserResponse
func (c *ClientWithResponses) DeleteUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteUsersUserResponse, error) {
	rsp, err := c.DeleteUsersUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUserResponse(rsp)
}

func (c *ClientWithResponses) DeleteUsersUserWithResponse(ctx context.Context, body DeleteUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteUsersUserResponse, error) {
	rsp, err := c.DeleteUsersUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUserResponse(rsp)
}

// GetUsersUserWithResponse request returning *GetUsersUserResponse
func (c *ClientWithResponses) GetUsersUserWithResponse(ctx context.Context, params *GetUsersUserParams, reqEditors ...RequestEditorFn) (*GetUsersUserResponse, error) {
	rsp, err := c.GetUsersUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUserResponse(rsp)
}

// HeadUsersUserWithBodyWithResponse request with arbitrary body returning *HeadUsersUserResponse
func (c *ClientWithResponses) HeadUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*HeadUsersUserResponse, error) {
	rsp, err := c.HeadUsersUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadUsersUserResponse(rsp)
}

func (c *ClientWithResponses) HeadUsersUserWithResponse(ctx context.Context, body HeadUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*HeadUsersUserResponse, error) {
	rsp, err := c.HeadUsersUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseHeadUsersUserResponse(rsp)
}

// PatchUsersUserWithBodyWithResponse request with arbitrary body returning *PatchUsersUserResponse
func (c *ClientWithResponses) PatchUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersUserResponse, error) {
	rsp, err := c.PatchUsersUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersUserResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersUserWithResponse(ctx context.Context, body PatchUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersUserResponse, error) {
	rsp, err := c.PatchUsersUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersUserResponse(rsp)
}

// PostUsersUserWithBodyWithResponse request with arbitrary body returning *PostUsersUserResponse
func (c *ClientWithResponses) PostUsersUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersUserResponse, error) {
	rsp, err := c.PostUsersUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUserResponse(rsp)
}

func (c *ClientWithResponses) PostUsersUserWithResponse(ctx context.Context, body PostUsersUserJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersUserResponse, error) {
	rsp, err := c.PostUsersUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUserResponse(rsp)
}

// ParseDeleteRbacEndpointResponse parses an HTTP response from a DeleteRbacEndpointWithResponse call
func ParseDeleteRbacEndpointResponse(rsp *http.Response) (*DeleteRbacEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRbacEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRbacEndpointResponse parses an HTTP response from a GetRbacEndpointWithResponse call
func ParseGetRbacEndpointResponse(rsp *http.Response) (*GetRbacEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostRbacEndpointResponse parses an HTTP response from a PostRbacEndpointWithResponse call
func ParsePostRbacEndpointResponse(rsp *http.Response) (*PostRbacEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRbacEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRbacListResourceGroupsResponse parses an HTTP response from a GetRbacListResourceGroupsWithResponse call
func ParseGetRbacListResourceGroupsResponse(rsp *http.Response) (*GetRbacListResourceGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacListResourceGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRbacListRolesResponse parses an HTTP response from a GetRbacListRolesWithResponse call
func ParseGetRbacListRolesResponse(rsp *http.Response) (*GetRbacListRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacListRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRbacPolicyResponse parses an HTTP response from a DeleteRbacPolicyWithResponse call
func ParseDeleteRbacPolicyResponse(rsp *http.Response) (*DeleteRbacPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRbacPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetRbacPolicyResponse parses an HTTP response from a GetRbacPolicyWithResponse call
func ParseGetRbacPolicyResponse(rsp *http.Response) (*GetRbacPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RBACPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRbacPolicyResponse parses an HTTP response from a PostRbacPolicyWithResponse call
func ParsePostRbacPolicyResponse(rsp *http.Response) (*PostRbacPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRbacPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest FieldError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeleteRbacResourceGroupResponse parses an HTTP response from a DeleteRbacResourceGroupWithResponse call
func ParseDeleteRbacResourceGroupResponse(rsp *http.Response) (*DeleteRbacResourceGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRbacResourceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRbacResourceGroupResponse parses an HTTP response from a GetRbacResourceGroupWithResponse call
func ParseGetRbacResourceGroupResponse(rsp *http.Response) (*GetRbacResourceGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacResourceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHeadRbacResourceGroupResponse parses an HTTP response from a HeadRbacResourceGroupWithResponse call
func ParseHeadRbacResourceGroupResponse(rsp *http.Response) (*HeadRbacResourceGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadRbacResourceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRbacResourceGroupResponse parses an HTTP response from a PostRbacResourceGroupWithResponse call
func ParsePostRbacResourceGroupResponse(rsp *http.Response) (*PostRbacResourceGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRbacResourceGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRbacRoleResponse parses an HTTP response from a DeleteRbacRoleWithResponse call
func ParseDeleteRbacRoleResponse(rsp *http.Response) (*DeleteRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetRbacRoleResponse parses an HTTP response from a GetRbacRoleWithResponse call
func ParseGetRbacRoleResponse(rsp *http.Response) (*GetRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHeadRbacRoleResponse parses an HTTP response from a HeadRbacRoleWithResponse call
func ParseHeadRbacRoleResponse(rsp *http.Response) (*HeadRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRbacRoleResponse parses an HTTP response from a PostRbacRoleWithResponse call
func ParsePostRbacRoleResponse(rsp *http.Response) (*PostRbacRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRbacRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteRbacUserResponse parses an HTTP response from a DeleteRbacUserWithResponse call
func ParseDeleteRbacUserResponse(rsp *http.Response) (*DeleteRbacUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRbacUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetRbacUserResponse parses an HTTP response from a GetRbacUserWithResponse call
func ParseGetRbacUserResponse(rsp *http.Response) (*GetRbacUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRbacUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostRbacUserResponse parses an HTTP response from a PostRbacUserWithResponse call
func ParsePostRbacUserResponse(rsp *http.Response) (*PostRbacUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRbacUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersListResponse parses an HTTP response from a GetUsersListWithResponse call
func ParseGetUsersListResponse(rsp *http.Response) (*GetUsersListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersMeResponse parses an HTTP response from a GetUsersMeWithResponse call
func ParseGetUsersMeResponse(rsp *http.Response) (*GetUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUsersMeResponse parses an HTTP response from a PatchUsersMeWithResponse call
func ParsePatchUsersMeResponse(rsp *http.Response) (*PatchUsersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteUsersUserResponse parses an HTTP response from a DeleteUsersUserWithResponse call
func ParseDeleteUsersUserResponse(rsp *http.Response) (*DeleteUsersUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUsersUserResponse parses an HTTP response from a GetUsersUserWithResponse call
func ParseGetUsersUserResponse(rsp *http.Response) (*GetUsersUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseHeadUsersUserResponse parses an HTTP response from a HeadUsersUserWithResponse call
func ParseHeadUsersUserResponse(rsp *http.Response) (*HeadUsersUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &HeadUsersUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePatchUsersUserResponse parses an HTTP response from a PatchUsersUserWithResponse call
func ParsePatchUsersUserResponse(rsp *http.Response) (*PatchUsersUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest GenericNotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParsePostUsersUserResponse parses an HTTP response from a PostUsersUserWithResponse call
func ParsePostUsersUserResponse(rsp *http.Response) (*PostUsersUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest GenericBadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrGeneric
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}
